DROP ALL OBJECTS;

CREATE TABLE IF NOT EXISTS users
(
    user_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email     VARCHAR(255) NOT NULL UNIQUE,
    login     VARCHAR(255) NOT NULL UNIQUE,
    user_name VARCHAR(255),
    birthday  DATE         NOT NULL
);

CREATE TABLE IF NOT EXISTS friendship_statuses
(
    status_id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    friendship_status_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS friendships
(
    user_id   INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    status_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_user_friendships FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_friend_friendships FOREIGN KEY (friend_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_status_friendships FOREIGN KEY (status_id) REFERENCES friendship_statuses (status_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS ratings
(
    rating_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name    VARCHAR(255) NOT NULL,
    description  TEXT,
    duration     INTEGER      NOT NULL,
    release_date DATE         NOT NULL,
    rating_id    INTEGER      NOT NULL,
    CONSTRAINT fk_rating_films FOREIGN KEY (rating_id) REFERENCES ratings (rating_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_film_genres FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_genre_film_genres FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users_film_likes
(
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_film_user_film_likes FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_user_film_likes FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR NOT NULL ,
    is_positive BOOL NOT NULL,
    user_id     INT  NOT NULL,
    film_id     INT  NOT NULL,
    CONSTRAINT unique_reviewer UNIQUE (user_id, film_id),
    CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_film_id FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes
(
    review_id INT REFERENCES reviews (review_id) ON DELETE CASCADE NOT NULL,
    user_id   INT REFERENCES users (user_id) ON DELETE CASCADE     NOT NULL,
    is_positive BOOL,
    CONSTRAINT pk PRIMARY KEY (review_id, user_id)
);
